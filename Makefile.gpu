# DATA_ROOT_DIR = /data2/ocr/outer
# REC_DATA_ROOT_DIR = /root/jinlong/data

# relative train.txt and test.txt
DATA_ROOT_DIR = /root/data/gen_images/chn
# relative to labels.txt's path. eg.  ./chn/***.jpg
DATA_ROOT_DIR2 = /root/data/gen_images
REC_DATA_ROOT_DIR = /root/data/gen_images/chn

# ['conv', 'conv-lite-rnn', 'densenet', 'densenet-lite']
EMB_MODEL_TYPE = densenet-lite
SEQ_MODEL_TYPE = gru
MODEL_NAME = $(EMB_MODEL_TYPE)-$(SEQ_MODEL_TYPE)
EPOCH = 41

gen-lst:
	python scripts/im2rec.py --list --num-label 20 --chunks 1 --train-idx-fp $(DATA_ROOT_DIR)/train.txt \
		--test-idx-fp $(DATA_ROOT_DIR)/test.txt --prefix $(DATA_ROOT_DIR)/lst/cnocr

gen-rec:
	python scripts/im2rec.py --pack-label --color 1 --num-thread 6 --prefix $(DATA_ROOT_DIR)/lst --root $(DATA_ROOT_DIR2)

##
## copy rec dir from $(DATA_ROOT_DIR) to $(REC_DATA_ROOT_DIR)
##

#train:
#	nohup python scripts/cnocr_train.py --gpu 1 --emb_model_type $(EMB_MODEL_TYPE) --seq_model_type $(SEQ_MODEL_TYPE) \
#	--optimizer Adam --epoch $(EPOCH) --lr 3e-3 \
#	--train_file $(REC_DATA_ROOT_DIR)/lst/cnocr_train --test_file $(REC_DATA_ROOT_DIR)/lst/cnocr_test \
#	>> nohup-$(MODEL_NAME).out 2>&1 &

train:
	python scripts/cnocr_train.py --gpu 1 --emb_model_type $(EMB_MODEL_TYPE) --seq_model_type $(SEQ_MODEL_TYPE) \
	--optimizer Adam --epoch $(EPOCH) --lr 3e-3 \
	--train_file $(REC_DATA_ROOT_DIR)/lst/cnocr_train --test_file $(REC_DATA_ROOT_DIR)/lst/cnocr_test


evaluate:
	python scripts/cnocr_evaluate.py --model-name $(MODEL_NAME) --model-epoch $(EPOCH) -i $(REC_DATA_ROOT_DIR)/test-part.txt --image-prefix-dir $(REC_DATA_ROOT_DIR) --batch-size 128 --gpu 1 -o evaluate/$(MODEL_NAME)-$(EPOCH)

filter:
	python scripts/filter_samples.py --sample_file $(REC_DATA_ROOT_DIR)/test-part.txt --badcases_file evaluate/$(MODEL_NAME)-$(EPOCH)/badcases.txt --distance_thrsh 2 -o $(REC_DATA_ROOT_DIR)/new.txt

predict:
	python scripts/cnocr_predict.py --model_name $(MODEL_NAME) --file examples/rand_cn1.png



.PHONY: gen-lst gen-rec train predict evaluate filter
